#! /usr/bin/env nix-shell
#! nix-shell -i bash -p bash plan9port reattach-to-user-namespace
#
# opener-daemon [options] - daemon to handle plumb/web requests by opening URLs in Chrome
# Options:
#   --start     Fork daemon
#   --kill      Kill running instance
#

assertNotRunning() {
    if [[ -f $PIDFILE ]]; then
        old_pid=$(cat $PIDFILE)
        if ps -p "$old_pid" >/dev/null 2>&1; then
            printf 'opener-daemon: already running.\n' >&2
            return 1
        fi
        rm -f "$PIDFILE"
    fi
    return 0
}

assertPlumbAccess() {
    if ! 9 9p stat plumb/web >/dev/null 2>&1; then
        printf 'opener-daemon: no access to plumb/web.\n' >&2
        return 1
    fi
    return 0
}

action_start() {
    assertNotRunning || return $?
    assertPlumbAccess || return $?
    exec <&- >/dev/null 2>&1
    nohup "${BASH_SOURCE[0]}" --mainLoop &
    echo "$!" >"$PIDFILE"
}

action_kill() {
    kill $(cat $PIDFILE) || return $?
    rm -f $PIDFILE || return $?
}

openURL() {
    local link="$1"
    local frontmost_pid=$(reattach-to-user-namespace lsappinfo info -only pid $(reattach-to-user-namespace lsappinfo front))
    frontmost_pid="${frontmost_pid##*=}"
    reattach-to-user-namespace osascript -e "
        on run argv
            set theUrl to item 1 of argv
            set theFrontmostPid to item 2 of argv
            set found to false
            tell application \"Google Chrome\"
                repeat with theWindow in every window
                    set tabIndex to 1
                    repeat with theTab in every tab of theWindow
                        if theTab's URL is theUrl then
                            set found to true
                            exit repeat
                        end if
                        set tabIndex to tabIndex + 1
                    end repeat
                    if found then
                        exit repeat
                    end if
                end repeat
                if found then
                    set theWindow's active tab index to tabIndex
                    set index of theWindow to 1
                else
                    tell window 1 to make new tab with properties {URL:theUrl}
                end if
            end tell
            tell application \"System Events\"
                set frontmost of every process whose unix id is theFrontmostPid to true
            end tell
        end run
    " "$link" "$frontmost_pid"
    return $?
}

action_mainLoop() {
    exec <&- >>"$LOGFILE" 2>&1
    exec < <(9 9p read plumb/web)
    read_pid=$!
    trap 'kill $read_pid' EXIT
    while read src; do
        read dst
        read wdir
        read type
        read attr
        read ndata
        read -N $ndata data
        openURL "$data"
    done
}

export PIDFILE="$XDG_RUNTIME_DIR/opener-daemon.pid"
export LOGFILE="$XDG_RUNTIME_DIR/opener-daemon.log"

action='start'
case "$1" in
    --*)
        action="${1#--}"
        shift;;
esac

"action_${action}" "$@"
exit $?
