#!/bin/bash

function zeal_status()
{
  local object="$1"
  git notes --ref refs/notes/zeal show "$object" 2>/dev/null
}

function mark()
{
  local object="$1"
  local status="$2"
  git notes --ref refs/notes/zeal add -f -m "$status" "$object" 2>/dev/null
  return $?
}

function zeal_mark()
{
  local -a objects=()
  local status=ok
  while [[ $# -ne 0 ]]
  do
    case "$1" in
      -a|--all)
        eval "objects=( $(git for-each-ref --shell --format='%(refname)' refs/heads/) )"
        ;;
      -s|--status)
        shift
        status="$1"
        ;;
      -s*)
        status="${1#-s}"
        ;;
      --status=*)
        status="${1#--status=}"
        ;;
      -*)
        printf 'git zeal mark: unknown option "%s".\n' "$1" >&2
        return 1
        ;;
      *)
        objects+=("$1")
        ;;
    esac
    shift
  done
  for object in "${objects[@]}"; do
    mark "$object" "$status" || return $?
  done
}

function zeal_test()
{
  local test_command=$(git config --get zeal.test-command)
  if [[ -z "$test_command" ]]
  then
    printf 'git zeal test: zeal.test-command not set.\n' >&2
    return 1
  fi

  local object=$(zeal_next)
  [[ -z "$object" ]] && return 0

  local test_dir=$(mktemp -d -t 'zeal.XXXXXXX')
  git worktree add -f --detach "$test_dir" "$object" || return $?

  pushd "$test_dir" || return $?

  local status=failed
  eval "$test_command" && status=ok

  popd

  zeal_mark "$object" "$status"
  rm -rf "$test_dir"
}

function zeal_next()
{
  # HEAD always gets priority
  if [[ -z "$(zeal_status HEAD)" ]]
  then
    git rev-parse HEAD
    return 0
  fi

  # Next, find an untested branch tip
  git for-each-ref --format='%(refname)' refs/heads/ | \
  while read refname
  do
    local commit=$(git rev-parse "$refname")
    if [[ "$(zeal_status "$commit")" != "ok" ]]
    then
      echo "$commit"
      return 0
    fi
  done

  # Nothing
  return 1
}

command="${1//-/_}"
shift
"zeal_${command}" "$@"
exit $?
